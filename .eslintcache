[{"/Users/shoujiakane/Development/React/dot-nanja/src/App.tsx":"1","/Users/shoujiakane/Development/React/dot-nanja/src/index.tsx":"2"},{"size":7926,"mtime":1611564921035,"results":"3","hashOfConfig":"4"},{"size":554,"mtime":1611307672245,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"unafns",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/shoujiakane/Development/React/dot-nanja/src/App.tsx",["11","12"],"import React, {useState} from 'react'\nimport './App.css'\n\n\nfunction App() {\n\n  const [grid, setGrid] = useState(32)\n  const [gridSwitch, setGridSwitch] = useState(0)\n  const [bright, setBright] = useState(27)\n  const [brightSwitch, setBrightSwitch] = useState(0)\n\n  const handleGrid = (hIEvent: React.ChangeEvent<HTMLInputElement>) => {\n    if(hIEvent.target.value != null){\n      var gridStr = hIEvent.target.value\n      var gridNum: number = +gridStr\n      setGrid(gridNum)\n    }\n  }\n\n  const switchGrid = (hIEvent: React.ChangeEvent<HTMLInputElement>) => {\n    if(hIEvent.target.value != null){\n      var gridSwitchStr = hIEvent.target.value\n      var gridSwitchNum: number = +gridSwitchStr\n      if(gridSwitchNum === 0){\n        gridSwitchNum = 1\n      }else{\n        gridSwitchNum = 0\n      }\n      setGridSwitch(gridSwitchNum)\n    }\n  }\n\n  const handleBright = (hIEvent: React.ChangeEvent<HTMLInputElement>) => {\n    if(hIEvent.target.value != null){\n      var brightStr = hIEvent.target.value\n      var brightNum: number = +brightStr\n      setBright(brightNum)\n    }\n  }\n\n  const switchBright = (hIEvent: React.ChangeEvent<HTMLInputElement>) => {\n    if(hIEvent.target.value != null){\n      var brightSwitchStr = hIEvent.target.value\n      var brightSwitchNum: number = +brightSwitchStr\n      if(brightSwitchNum === 0){\n        brightSwitchNum = 1\n      }else{\n        brightSwitchNum = 0\n      }\n      setBrightSwitch(brightSwitchNum)\n    }\n  }\n\n  const handleImage = (hIEvent: React.ChangeEvent<HTMLInputElement>) => {\n    if(hIEvent.target.files != null){\n      const file = hIEvent.target.files[0]\n      if(file !== undefined){\n        const fileReader = new FileReader()\n        const img = new Image()\n        const canvasA = document.getElementById(\"prevCanvas\") as HTMLCanvasElement\n        const canvasB = document.getElementById(\"postCanvas\") as HTMLCanvasElement\n        const ctxA =  canvasA.getContext('2d')\n        const ctxB =  canvasB.getContext('2d')\n        if(ctxA != null && ctxB != null){\n          ctxA.clearRect(0,0,640,640)\n          ctxB.clearRect(0,0,640,640)\n        }\n        fileReader.onload = (event: ProgressEvent<FileReader>) => {\n          img.onload = () => {\n            if(ctxA != null){\n              var imgSize = 0\n              if(img.width > img.height){\n                imgSize = img.width\n              }else{\n                imgSize = img.height\n              }\n              ctxA.drawImage(img,0,0,imgSize,imgSize,0,0,640,640)\n            }\n          } \n          img.src = event.target?.result as string \n        }\n        fileReader.readAsDataURL(file)\n      }\n    }\n  }\n\n  const pixelize = () => {\n    const canvasA = document.getElementById(\"prevCanvas\") as HTMLCanvasElement\n    const canvasB = document.getElementById(\"postCanvas\") as HTMLCanvasElement\n    const ctxA =  canvasA.getContext('2d')\n    const ctxB =  canvasB.getContext('2d')\n    \n    if(ctxA != null && ctxB != null){\n      var gridSize = canvasA.width / grid\n      \n      for (var m = 0; m < grid; m += 1) {\n        for (var n = 0; n < grid; n += 1) {\n          var imageData = ctxA.getImageData(m * gridSize,n * gridSize,gridSize,gridSize)\n          var data = imageData.data\n          var pRed = 0\n          var pGreen = 0\n          var pBlue = 0\n          var pAlpha = 0\n\n          for (var i = 0; i < data.length; i += 4) {\n              pRed     += data[i]  // red\n              pGreen   += data[i + 1]  // green\n              pBlue    += data[i + 2]  // blue\n              pAlpha   += data[i + 3] // alpha\n          }\n          if(brightSwitch === 0){\n            pRed = pRed / (data.length / 4)\n            pGreen = pGreen / (data.length / 4)\n            pBlue = pBlue / (data.length / 4)\n            pAlpha = pAlpha / (data.length / 4)\n          }else{\n            if(bright == 8){\n              pRed = reduceColor8(pRed / (data.length / 4))\n              pGreen = reduceColor8(pGreen / (data.length / 4))\n              pBlue = reduceColor8(pBlue / (data.length / 4))\n            }else if(bright == 27){\n              pRed = reduceColor27(pRed / (data.length / 4))\n              pGreen = reduceColor27(pGreen / (data.length / 4))\n              pBlue = reduceColor27(pBlue / (data.length / 4))\n            }else{\n              pRed = reduceColor64(pRed / (data.length / 4))\n              pGreen = reduceColor64(pGreen / (data.length / 4))\n              pBlue = reduceColor64(pBlue / (data.length / 4))\n            }\n\n            pAlpha = pAlpha / (data.length / 4)            \n          }\n\n          //var pColor = (pRed + pBlue + pGreen) / 3\n\n          for (var j = 0; j < data.length; j += 4) {\n            data[j]      = pRed   // red\n            data[j + 1]  = pGreen // green\n            data[j + 2]  = pBlue // blue\n            data[j + 3]  = 255\n            if(pAlpha < 128){\n              data[j + 3]  = 0\n            }\n          }\n        ctxB.putImageData(imageData,m * gridSize,n * gridSize)\n        }\n      }\n      if(gridSwitch === 1){\n        drawGrid()\n      }\n      //\n    }\n  }\n\n  const reduceColor8 = (pictData: number) => {\n    var result = 0\n    if(pictData < 128){\n      result = 64\n    }else{\n      result = 192\n    }\n    return result\n  }\n\n  const reduceColor27 = (pictData: number) => {\n    var result = 0\n    if(pictData < 85){\n      result = 43\n    }else if(pictData < 170){\n      result = 128\n    }else{\n      result = 213\n    }\n    return result\n  }\n\n  const reduceColor64 = (pictData: number) => {\n    var result = 0\n    if(pictData < 64){\n      result = 0\n    }else if(pictData < 128){\n      result = 96\n    }else if(pictData < 192){\n      result = 160\n    }else{\n      result = 224\n    }\n    return result\n  }\n\n  const drawGrid = () => {\n    const canvas = document.getElementById(\"postCanvas\") as HTMLCanvasElement\n    const ctx =  canvas.getContext('2d')\n    if(ctx != null){\n      ctx.strokeStyle = 'white'\n      ctx.lineWidth = 1\n\n      for(var i = 0;i < grid;i++){\n        ctx.beginPath()\n        ctx.moveTo(0, canvas.height * (i + 1) / grid)\n        ctx.lineTo(canvas.width, canvas.height * (i + 1) / grid)\n        ctx.closePath()\n        ctx.stroke()\n\n        ctx.beginPath()\n        ctx.moveTo(canvas.width * (i + 1) / grid, 0)\n        ctx.lineTo(canvas.width * (i + 1) / grid, canvas.height)\n        ctx.closePath()\n        ctx.stroke()\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>ドット絵変換ジェネレータ</h1>\n      <input type=\"file\" id=\"pict\" onChange={handleImage} />\n\n      <br />\n      <input type=\"checkbox\" id=\"gridSwitch\" name=\"gridSwitch\" value={gridSwitch} onChange={switchGrid} checked={gridSwitch === 1} />\n      <label>グリッドを描画する</label>\n\n      <input type=\"radio\" name=\"grid\" value=\"16\" onChange={handleGrid} checked={grid === 16} />\n      <label>16x16</label>\n      <input type=\"radio\" name=\"grid\" value=\"32\" onChange={handleGrid} checked={grid === 32} />\n      <label>32x32</label>\n      <input type=\"radio\" name=\"grid\" value=\"64\" onChange={handleGrid} checked={grid === 64} />\n      <label>64x64</label>    \n      \n      <br />\n      <input type=\"checkbox\" id=\"switchBright\" name=\"switchBright\" value={brightSwitch} onChange={switchBright} checked={brightSwitch === 1} />\n      <label>減色処理をONにする</label>\n\n      <input type=\"radio\" name=\"bright\" value=\"8\" onChange={handleBright} checked={bright === 8} />\n      <label>8色</label>\n      <input type=\"radio\" name=\"bright\" value=\"27\" onChange={handleBright} checked={bright === 27} />\n      <label>27色</label>\n      <input type=\"radio\" name=\"bright\" value=\"64\" onChange={handleBright} checked={bright === 64} />\n      <label>64色</label>  \n\n      <br />\n      <input type=\"button\" value=\"ドットに変換！！\" onClick={pixelize}/>\n      <br />\n      <canvas id=\"prevCanvas\" width=\"640\" height=\"640\" ></canvas>\n      <canvas id=\"postCanvas\" width=\"640\" height=\"640\" ></canvas>\n    </div>\n\n  )\n}\n\n\nexport default App\n","/Users/shoujiakane/Development/React/dot-nanja/src/index.tsx",["13"],{"ruleId":"14","severity":1,"message":"15","line":117,"column":23,"nodeType":"16","messageId":"17","endLine":117,"endColumn":25},{"ruleId":"14","severity":1,"message":"15","line":121,"column":29,"nodeType":"16","messageId":"17","endLine":121,"endColumn":31},{"ruleId":"18","severity":1,"message":"19","line":3,"column":9,"nodeType":"20","messageId":"21","endLine":3,"endColumn":21},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'MDCTopAppBar' is defined but never used.","Identifier","unusedVar"]